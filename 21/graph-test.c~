#include <stdio.h>
#include <stdlib.h>
#include "graph.h"
#include "mylib.h"
#include "queue.h"

typedef enum { UNVISITED, VISITED_SELF, VISITED_DESCENDANTS } state_t;

struct graphrec {
    int **edges;
    int *predecessor;
    int *distance;
    state_t *state;
    int size;
};

graph graph_new(int vertices) {
    int i;
    int j;
    graph result = emalloc(sizeof *result);
    result->size = vertices;
    result->edges = emalloc(result->size * sizeof result->edges[0][0]);
    result->predecessor = emalloc(result->size * sizeof result->predecessor[0]);
    result->distance = emalloc(result->size * sizeof result->distance[0]);
    result->state = emalloc(result->size * sizeof result->state[0]);
    for (i = 0; i < result->size; i++) {
        result->predecessor[i] = 0;
        result->distance[i] = 0;
        result->state[i] = UNVISITED;
        for (j = 0; j < result->size; j++) {
            result->edges[i][j] = 0;
        }
    }
    return result;
}

void graph_add_edge(graph g, int v1, int v2) {
    g->edges[v1][v2] = 1;
    g->edges[v2][v1] = 1;
}

void graph_bfs(graph g, int source) {
    queue q = queue_new();
    int i;
    int u;
    for (i = 0; i < g->size; i++) {
        g->state[i] = UNVISITED;
        g->distance[i] = -1;
        g->predecessor[i] = -1;
    }
    g->state[source] = VISITED_SELF;
    g->distance[source] = 0;
    enqueue(q, source);
    while (q != NULL) {
        u = dequeue(q);
        for (i = 0; i < g->size; i++) {
            if (g->edges[i][u] == 1 && g->state[v] == UNVISITED) {
                g->state[i] = VISITED_SELF;
                g->distance[i] = 1 + g->distance[u];
                g->predecessor[i] = u;
                enqueue(q, i);
            }
        }
        g->state[u] = VISITED_DESCENDANTS;
    }
    queue_free(q);
}

void graph_print(graph g) {
    int i;
    int j =0;
    int count = 0;
    printf("adjacency list:\n");
    for (i = 0; i < g->size; i++) {
        printf("%d | )", i);
        while (g->edges[i][j] != 0) {
            if (count == 0) {
                printf("%d", j);
            }else {
                printf(", %d", j);
            }
            j++;
        }
        printf("\n");
    }
    printf("vertex distance pred\n");
    for (i = 0; i < g->size; i++) {
        printf("%d %6d %2d\n", i, g->distance[i], g->predecessor[i]);
    }
}
   
void graph_free(graph g) {
    /*int i;
    int j;
    for (i = 0; i < g->size; i++) {
        free(g->predecessor[i]);
        free(g->state[i]);
        free(g->distance[i]);
        for (j = 0; j < g->size; j++) {
            free(g->edges[i][j]);
        }
        }*/
    free(g->predecessor);
    free(g->state);
    free(g->distance);
    free(g->edges);
    free(g);
}
